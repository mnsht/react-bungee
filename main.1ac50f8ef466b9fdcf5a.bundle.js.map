{"version":3,"file":"main.1ac50f8ef466b9fdcf5a.bundle.js","sources":["webpack:///./src/index.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\n\nconst determineHeight = (height, ref) => {\n  if (!ref.current) return;\n\n  const measuredHeight = ref.current.scrollHeight;\n\n  height = height.toString();\n\n  if (height === 'auto') return `${measuredHeight}px`;\n  else if (height.includes('%'))\n    return `${measuredHeight *\n      (height.substr(0, height.indexOf('%')) / 100)}px`;\n  else return `${height}px`;\n};\n\nexport default ({\n  height,\n  children,\n  componentClassName,\n  componentStyle,\n  duration = 500,\n  easing = 'ease-in-out',\n  delay = 0,\n  onBefore,\n  onAfter,\n  ...props\n}) => {\n  const containerRef = useRef(null);\n  const [computedHeight, setComputedHeight] = useState(\n    determineHeight(height, containerRef)\n  );\n\n  useEffect(() => {\n    const newHeight = determineHeight(height, containerRef);\n    const allHeights = { given: height, computed: newHeight };\n\n    if (onBefore) onBefore(allHeights);\n\n    setComputedHeight(newHeight);\n\n    if (onAfter) setTimeout(() => onAfter(allHeights), delay + duration);\n  }, [height]);\n\n  const componentStyles = {\n    height: computedHeight,\n    overflow: 'hidden',\n    transition: `height ${duration}ms ${easing} ${delay}ms`,\n    ...componentStyle\n  };\n\n  return (\n    <div\n      ref={containerRef}\n      style={componentStyles}\n      className={componentClassName}\n    >\n      <div {...props}>{children}</div>\n    </div>\n  );\n};\n"],"mappings":"AAEA","sourceRoot":""}